# telegram_supplier_bot.py
import re
import time
from rapidfuzz import fuzz, process
import logging
import json
import os
import openai
import pandas as pd
from datetime import datetime
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, CallbackQueryHandler,
    Filters, CallbackContext, ConversationHandler
)
import gspread
from google.oauth2.service_account import Credentials

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = '8138310577:AAGm6oKHlSD2KHCWfScMZE1lIUOunpBI-sg'
OPENAI_API_KEY = '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'
GOOGLE_SHEET_ID = '1rrjD_SpB79V0djuW-lDP_hIRptzdrITauRoybuJkoqA'

GOOGLE_SHEET_RAW = 'Raw'
GOOGLE_SHEET_CATALOG = 'Catalog'
CUSTOM_GROUPS_FILE = 'custom_groups.json'

openai.api_key = OPENAI_API_KEY

scope = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
credentials = Credentials.from_service_account_file('credentials.json', scopes=scope)
gsheet = gspread.authorize(credentials)

# === –°–û–°–¢–û–Ø–ù–ò–Ø ===
ASK_SUPPLIER = 1

# === –ü–ê–ú–Ø–¢–¨ ===
user_messages = {}
pending_products = {}
custom_groups = {}

# === –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(format='%(asctime)s - %(levelname)s - %(message)s', level=logging.INFO)

def load_custom_groups():
    if os.path.exists(CUSTOM_GROUPS_FILE):
        with open(CUSTOM_GROUPS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def normalize_name(name):
    name = name.lower()
    name = re.sub(r"\(.*?\)", "", name)  # —É–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏ (nano sim –∏ —Ç.–ø.)
    name = re.sub(r"\b(dual sim|nano sim|esim|iso|ansi)\b", "", name)
    name = re.sub(r"[^a-z0-9\s]", "", name)  # —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
    name = re.sub(r"\s+", " ", name).strip()
    return name

def save_custom_groups(groups):
    with open(CUSTOM_GROUPS_FILE, "w", encoding="utf-8") as f:
        json.dump(groups, f, ensure_ascii=False, indent=2)

custom_groups = load_custom_groups()

def find_best_match(model, sku_df, threshold=93):
    matches = process.extractOne(model, sku_df['model'], scorer=fuzz.token_sort_ratio)
    if matches and matches[1] >= threshold:
        matched_model = matches[0]
        sku_row = sku_df[sku_df['model'] == matched_model]
        return sku_row['market_sku'].values[0]
    return None

def get_device_group(model):
    model_lower = model.lower()
    if "macbook" in model_lower:
        return "MacBook"
    elif "iphone" in model_lower:
        return "iPhone"
    elif "airpods" in model_lower:
        return "AirPods"
    elif "pixel" in model_lower:
        return "Pixel"
    elif "ipad" in model_lower:
        return "iPad"
    elif "dji" in model_lower:
        return "DJI"
    elif "jbl" in model_lower or "charge" in model_lower:
        return "Speaker"
    elif model in custom_groups:
        return custom_groups[model]
    else:
        return None

def normalize_with_ai(messages, supplier):
    text = "".join(messages)
    prompt = f"""
    –¢—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞. –í–µ—Ä–Ω–∏ JSON-–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–ª—è–º–∏:
    - model
    - memory
    - color
    - price
    - quantity
    - supplier (–≤—Å–µ–≥–¥–∞ "{supplier}")
    - datetime (–≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM, –≤—Å–µ–≥–¥–∞ 0000-00-00 00:00)

    –ü–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–µ –∏–ª–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è—Ö –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏ **—Ç–∏–ø SIM-–∫–∞—Ä—Ç** –∏ –¥–æ–±–∞–≤—å –µ–≥–æ –≤ **–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏** –≤ —Å–∫–æ–±–∫–∞—Ö. –ü—Ä–∏–º–µ—Ä—ã:

    ‚Äî –ï—Å–ª–∏ –°–®–ê / LL/A / American version ‚Äî —ç—Ç–æ **(dual esim)**  
    ‚Äî –ï—Å–ª–∏ –†–æ—Å—Å–∏—è / RU/A ‚Äî —ç—Ç–æ **(nano sim + esim)**  
    ‚Äî –ï—Å–ª–∏ –ì–æ–Ω–∫–æ–Ω–≥ / ZP/A ‚Äî —ç—Ç–æ **(2 nano sim)**  
    ‚Äî –ï—Å–ª–∏ –ö–∏—Ç–∞–π / CH/A ‚Äî —ç—Ç–æ **(2 nano sim)**  
    ‚Äî –ï—Å–ª–∏ –ï–≤—Ä–æ–ø–∞ / F/A, D/A, B/A –∏ —Ç.–ø. ‚Äî —ç—Ç–æ **(nano sim + esim)**  
    ‚Äî –ï—Å–ª–∏ –¢–∞–π–≤–∞–Ω—å / TA/A ‚Äî —ç—Ç–æ **(nano sim + esim)**  
    ‚Äî –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç —Ç—É—Ç ‚Äî –∏—â–∏ –µ—ë —Å–∞–º.
    ‚Äî –ï—Å–ª–∏ —ç—Ç–æ MacBook, —Ç–æ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–Ω—è—Ç—å –∫–∞–∫–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (ANSI –∏–ª–∏ ISO) - –æ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç—Ä–∞–Ω—ã. –Ω–∞–ø—Ä–∏–º–µ—Ä –°–®–ê –∏ –ò–Ω–¥–∏—è –∏–º–µ—é—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ANSI. –ü–æ–∏—â–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–π–º–∏ —á—Ç–æ –∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞. –í–º–µ—Å—Ç–æ —Ñ–ª–∞–≥–∞ –∏–ª–∏ —Å–∏–º –¥–æ–±–∞–≤—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (ANSI) –∏–ª–∏ (ISO) –≤ –∫–æ–Ω—Ü–µ –º–æ–¥–µ–ª–∏. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, —Ç–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –°–®–ê - —Ç.–µ. ANSI.

    –ü—Ä–∏–º–µ—Ä—ã:

    "iPhone 15 Pro Max 256GB ZP/A" ‚Üí model: "iPhone 15 Pro Max (2 nano sim)"
    "iPhone 13 LL/A" ‚Üí model: "iPhone 13 (dual esim)"
    "iPhone 14 Pro Max" ‚Üí model: "iPhone 14 Pro Max (nano sim + esim)"

    –ù–æ—Ä–º–∞–ª–∏–∑—É–π —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö. –ï—Å–ª–∏ –ø–∏—à—É—Ç 71.2, –∑–Ω–∞—á–∏—Ç 71200. –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏, —Ç–æ—á–∫–∞–º–∏ –∏–ª–∏ –∑–∞–ø—è—Ç—ã–º–∏ ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–π. –ù–µ –¥–µ–ª–∞–π –æ—à–∏–±–æ–∫ –≤ JSON.
    –ï—Å–ª–∏ —ç—Ç–æ MacBook, —Ç–æ –≤ –Ω–∞—á–∞–ª–µ –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ "MacBook"
    –ï—Å–ª–∏ —ç—Ç–æ Iphone, —Ç–æ –≤ –Ω–∞—á–∞–ª–µ –º–æ–¥–µ–ª–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ "IPhone"
    
    –ï—Å–ª–∏ –≤–æ–∑–ª–µ —Ç–æ–≤–∞—Ä–∞ –∫—Ä–µ—Å—Ç–∏–∫ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—á—ë—Ä–∫–Ω—É—Ç–æ - –Ω–µ –¥–æ–±–∞–≤–ª—è–π. –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –¥–æ–±–∞–≤–ª—è–π.
    –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–π —Ç–æ–≤–∞—Ä, –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç Apple –∏–ª–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π. –õ—é–±–æ–π.
    –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –¥–∞—é—Ç —Ü–µ–Ω—É –û–ü–¢–û–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç 10 —à—Ç—É–∫ –æ–¥–Ω–∞ —Ü–µ–Ω–∞, –æ—Ç 20 –¥—Ä—É–≥–∞—è. –û—Ç—Å–µ–∏–≤–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–ø—Ç–æ–º, –∏ —Å—á–∏—Ç—ã–≤–∞–π —Ç–æ–ª—å–∫–æ —Ü–µ–Ω—É –ø–æ—à—Ç—É—á–Ω–æ.
    –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ –Ω–µ –ø–∏—à—É—Ç –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä —Ñ–∏—Ä–º—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä Dyson). –î–æ–ø–∏—Å—ã–≤–∞–π —Ñ–∏—Ä–º—É –≤ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏.
    –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–ª–µ—Ñ–æ–Ω, —Ç–æ –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–º–∫–∞—Ä—Ç–µ.
    
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
- –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, -49999), —ç—Ç–æ –ù–ï –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç. –ü—Ä–æ—Å—Ç–æ —É–±–µ—Ä–∏ –∑–Ω–∞–∫ –º–∏–Ω—É—Å –∏ —Å—á–∏—Ç–∞–π, —á—Ç–æ —Ü–µ–Ω–∞ = 49999.
- –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ —è–≤–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä Dyson), –Ω–æ –º–æ–¥–µ–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç "Absolute", "V11", "SV", "Detect" –∏ —Ç.–ø. ‚Äî –¥–æ–±–∞–≤—å "Dyson" –≤ –Ω–∞—á–∞–ª–æ –º–æ–¥–µ–ª–∏.
- –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–ª–∞–≥, –Ω–∞–ø—Ä–∏–º–µ—Ä üá¨üáß, –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä üá¨üáß ‚Äî —ç—Ç–æ –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è, nano sim + esim –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ISO).
- –ù–µ –æ—Ç–±—Ä–∞—Å—ã–≤–∞–π —Ç–æ–≤–∞—Ä—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π ‚Äî —Å—Ç–∞—Ä–∞–π—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–æ–¥–µ–ª—å, —Ü–µ–Ω—É –∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º supplier.
- –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ‚Äî —Å—á–∏—Ç–∞–π, —á—Ç–æ quantity = 1.

    –í–æ—Ç —Ç–æ–≤–∞—Ä—ã:
    {text}
    """

    try:
        print("[AI] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ChatGPT...")
        print(f"[AI] PROMPT:{prompt}")
        response = openai.ChatCompletion.create(
            model="gpt-4.1-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2,
        )
        print("[AI] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        content = response['choices'][0]['message']['content'].strip()
        print(f"[AI] CONTENT RAW:{content}")
        if not content or not (content.startswith("[") or content.startswith("{")):
            raise ValueError("AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç")
        return json.loads(content)
    except Exception as e:
        logging.error(f"OpenAI Error: {e}")
        return []

import hashlib
def normalize_for_match(text):
    text = text.lower()
    text = re.sub(r"\(.*?\)", "", text)
    text = re.sub(r"\d{2,4}\s?(gb|tb)", "", text)
    text = re.sub(r"\b(black|blue|yellow|white|red|green|purple|gold|silver|gray|pink|ultramarine)\b", "", text)
    text = re.sub(r"\b(nano sim|dual sim|esim|iso|ansi)\b", "", text)
    text = re.sub(r"[^a-z0-9\s]", "", text)
    return re.sub(r"\s+", " ", text).strip()
def generate_model_id(model: str, memory: str, color: str, country: str) -> str:
    base_string = f"{model}|{memory}|{color}|{country}".lower().strip()
    return hashlib.sha1(base_string.encode('utf-8')).hexdigest()[:10]


def handle_keyboard_input(update: Update, context: CallbackContext):
    text = (update.message.text or update.message.caption or "").lower()
    if "—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å" in text:
        return start_form(update, context)
    elif "–æ—á–∏—Å—Ç–∏—Ç—å" in text:
        return clear_messages(update, context)
    elif "—Ç–∞–±–ª–∏—Ü–∞" in text:
        return send_table_link(update, context)
    else:
        return handle_message(update, context)
def parse_summary_model(summary_model):
    """
    –î–µ–ª–∏—Ç —Å—Ç—Ä–æ–∫—É —Ç–∏–ø–∞ "IPhone 14 Plus (dual esim) 128 Yellow" –Ω–∞ —á–∞—Å—Ç–∏
    """
    s = summary_model
    s = s.replace("IPhone", "iPhone").replace("Iphone", "iPhone")  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä
    model = None
    memory = None
    color = None
    country = None

    # –£–±—Ä–∞—Ç—å —Å–∫–æ–±–∫–∏
    s = re.sub(r"\(.*?\)", "", s).strip()
    # –ù–∞–π—Ç–∏ –ø–∞–º—è—Ç—å (GB, TB)
    mem = re.findall(r"(\d+\s?(gb|tb))", s.lower())
    if mem:
        memory = mem[0][0].replace(" ", "").upper()  # —Ç–∏–ø–∞ '128GB'
        s = s.replace(mem[0][0], "")
    # –ù–∞–π—Ç–∏ —Ü–≤–µ—Ç (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–ª–æ–≤–æ)
    words = s.split()
    if len(words) > 1:
        color = words[-1].capitalize()
        s = " ".join(words[:-1])
    model = s.strip().replace("  ", " ")
    return {
        "model": model,
        "memory": memory,
        "color": color,
        "country": country
    }

def parse_sim_type(model):
    import re
    if not isinstance(model, str):
        return ''
    match = re.search(r'\((.*?)\)', model)
    if match:
        sim = match.group(1)
        for pattern in ['nano sim + esim', 'dual esim', '2 nano sim']:
            if pattern in sim.lower():
                return pattern
    return ''

def normalize_str(s):
    # –û—á–∏—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, —É–±–∏—Ä–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ–¥—Ä—è–¥
    return re.sub(r'\s+', ' ', str(s).lower().strip().replace("-", " ")).strip()


def find_sku(summary_row, sku_df):
    # summary_row ‚Äî —Å—Ç—Ä–æ–∫–∞ –∏–∑ summary DataFrame
    # sku_df ‚Äî DataFrame –∏–∑ art.csv (SKU –±–∞–∑–∞)
    model, memory, color, _ = split_summary_model(summary_row['model'])
    n_model = normalize_str(model)
    n_memory = normalize_str(memory)
    n_color = normalize_str(color)
    n_sim = normalize_str(parse_sim_type(summary_row['model']))

    # –°—Ç—Ä–æ–≥–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –º–æ–¥–µ–ª—å, –ø–∞–º—è—Ç—å, —Ü–≤–µ—Ç, —Å–∏–º–∫–∞
    match = sku_df[
        (sku_df['n_model'] == n_model) &
        (sku_df['n_memory'] == n_memory) &
        (sku_df['n_color'] == n_color) &
        (sku_df['n_sim'] == n_sim)
    ]
    if not match.empty:
        return str(match.iloc[0]['market_sku'])

    # –ë–µ–∑ —Ü–≤–µ—Ç–∞: –º–æ–¥–µ–ª—å, –ø–∞–º—è—Ç—å, —Å–∏–º–∫–∞
    match = sku_df[
        (sku_df['n_model'] == n_model) &
        (sku_df['n_memory'] == n_memory) &
        (sku_df['n_sim'] == n_sim)
    ]
    if not match.empty:
        return str(match.iloc[0]['market_sku'])

    return "‚Äî"
def send_table_link(update: Update, context: CallbackContext):
    url = f"https://docs.google.com/spreadsheets/d/{GOOGLE_SHEET_ID}"
    update.message.reply_text(f"üìä –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:\n{url}")

def split_summary_model(model_str):
    import re
    if not isinstance(model_str, str):
        return '', '', '', ''
    main = re.sub(r'\(.*?\)', '', model_str).strip()
    parts = main.split()
    model = []
    memory = ''
    color = ''
    for part in parts:
        if re.fullmatch(r'(\d+|1tb|2tb|512gb|256gb|128gb)', part.lower()):
            memory = part
        elif part.lower() in [
            "black", "white", "blue", "yellow", "gold", "green", "purple", "red", "gray", "pink", "ultramarine", "natural", "teal"
        ]:
            color = part
        else:
            model.append(part)
    return ' '.join(model).strip(), memory, color, ''

def update_google_sheets(products):
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    raw_sheet = gsheet.open_by_key(GOOGLE_SHEET_ID).worksheet(GOOGLE_SHEET_RAW)

    rows = []
    for p in products:
        model = p.get('model', '').strip()
        country = 'USA' if 'üá∫üá∏' in model or 'LL/A' in model else 'N/A'

        print(f"[DEBUG] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —Ç–æ–≤–∞—Ä: {p}")
        try:
            price = float(p.get('price') or 0)
            quantity = int(p.get('quantity') or 1)

            if price <= 0 or quantity <= 0:
                print(f"[SKIP] –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Ü–µ–Ω–∞={price}, –∫–æ–ª-–≤–æ={quantity}, –º–æ–¥–µ–ª—å={model}")
                continue

            rows.append([
                model, p.get('memory'), p.get('color'),
                price, quantity,
                p.get('supplier'),
                datetime.now().strftime("%Y-%m-%d %H:%M"), country
            ])
        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞: {p} ‚Äî {e}")

    if not raw_sheet.get_all_values():
        header = ['model', 'memory', 'color', 'price', 'quantity', 'supplier', 'datetime', 'country']
        print(f"[DEBUG] –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {products[0] if products else '–ü—É—Å—Ç–æ'}")
        raw_sheet.append_row(header)
        print("[Google Sheets] –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Raw")
    print(f"[DEBUG] –ü–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä: {products[0] if products else '–ü—É—Å—Ç–æ'}")
    print(f"[Google Sheets] –î–æ–±–∞–≤–ª—è–µ–º {len(rows)} —Å—Ç—Ä–æ–∫ –≤ Raw...")
    raw_sheet.append_rows(rows, value_input_option='USER_ENTERED')



    # === –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏—Å—Ç List ===
    data = raw_sheet.get_all_values()
    if not data or len(data) < 2:
        print("[WARNING] –õ–∏—Å—Ç Raw –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫.")
        return

    headers = data[0]
    headers = [h.strip() for h in headers]
    rows = data[1:]
    df = pd.DataFrame(rows, columns=headers)
    print(f"[DEBUG] df rows count: {len(df)}")
    df.columns = df.columns.str.strip()
    if 'country' not in df.columns:
        df['country'] = 'N/A'
    df['model'] = df['model'].astype(str).str.strip()
    df = df[df['model'] != '']

    for col in ['price']:
        if col in df.columns:
            df[col] = pd.to_numeric(df[col], errors='coerce')
    print(f"[DEBUG] –°—Ç—Ä–æ–∫ —Å —Ü–µ–Ω–æ–π: {len(df[df['price'].notnull()])}")
    print("[DEBUG] –°—Ç–æ–ª–±—Ü—ã –≤ DataFrame:", df.columns.tolist())
    print("[DEBUG] –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    print(df[['model', 'price', 'supplier']].head(10).to_string(index=False))

    summary_rows = []

    df['datetime'] = pd.to_datetime(df['datetime'], errors='coerce')

    if 'ID' not in df.columns:
        df['ID'] = df.apply(lambda row: generate_model_id(
            row.get('model', ''),
            row.get('memory', ''),
            row.get('color', ''),
            row.get('country', '')
        ), axis=1)
    else:
        df['ID'] = df['ID'].astype(str).fillna('').replace('', pd.NA)

        mask_missing = df['ID'].isna()
        df.loc[mask_missing, 'ID'] = df[mask_missing].apply(lambda row: generate_model_id(
            row.get('model', ''),
            row.get('memory', ''),
            row.get('color', ''),
            row.get('country', '')
        ), axis=1)

    for id_value, group in df[df['price'].notnull()].groupby('ID'):
        group = group.sort_values(by='datetime', ascending=False)
        latest_date = group.iloc[0]['datetime']
        today_group = group[group['datetime'].dt.date == latest_date.date()]

        if not today_group.empty:
            cheapest = today_group.loc[today_group['price'].idxmin()]

            base = cheapest['model'].strip()
            if cheapest['memory'] not in base:
                base += f" {cheapest['memory']}"
            if cheapest['color'] not in base:
                base += f" {cheapest['color']}"
            if cheapest['country'] != 'N/A':
                base += " üá∫üá∏"

            display_name = base.strip()
            suppliers = today_group[
                (today_group['price'] == cheapest['price']) &
                (today_group['datetime'] == cheapest['datetime'])
                ]['supplier'].dropna().unique()

            summary_rows.append([
                display_name,
                cheapest['price'],
                ', '.join(suppliers),
                cheapest['model'],
                cheapest['memory'],
                cheapest['color'],
                cheapest['country'],
                id_value  # –¥–æ–±–∞–≤–ª—è–µ–º ID –∫–∞–∫ —Å—Ç–æ–ª–±–µ—Ü
            ])

    summary = pd.DataFrame(summary_rows, columns=[
        'model', 'price', 'supplier', 'raw_model', 'raw_memory', 'raw_color', 'raw_country', 'ID'
    ])
    sku_df = pd.read_csv("art.csv")

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    sku_df['n_model'] = sku_df['model'].map(normalize_str)
    sku_df['n_memory'] = sku_df['memory'].map(lambda x: normalize_str(str(x)))
    sku_df['n_color'] = sku_df['color'].map(normalize_str)
    if 'sim_type' in sku_df.columns:
        sku_df['n_sim'] = sku_df['sim_type'].map(normalize_str)
    else:
        sku_df['n_sim'] = ''

    if 'SKU' not in summary.columns:
        summary['SKU'] = ""

    for idx, row in summary.iterrows():
        model, memory, color, _ = split_summary_model(row['model'])
        n_model = normalize_str(model)
        n_memory = normalize_str(memory)
        n_color = normalize_str(color)
        n_sim = normalize_str(parse_sim_type(row['model']))

        # –ò—â–µ–º —Å—Ç—Ä–æ–≥–æ –ø–æ –≤—Å–µ–º 4–º: –º–æ–¥–µ–ª—å, –ø–∞–º—è—Ç—å, —Ü–≤–µ—Ç, —Å–∏–º–∫–∞
        match = sku_df[
            (sku_df['n_model'] == n_model) &
            (sku_df['n_memory'] == n_memory) &
            (sku_df['n_color'] == n_color) &
            (sku_df['n_sim'] == n_sim)
            ]
        if not match.empty:
            summary.at[idx, 'SKU'] = str(match.iloc[0]['market_sku'])
            print(
                f"[MATCH] {row['model']} ‚Üí {n_model}|{n_memory}|{n_color}|{n_sim} ‚Üí {match.iloc[0]['model']}|{match.iloc[0]['memory']}|{match.iloc[0]['color']}|{match.iloc[0]['sim_type']} ‚Üí SKU={match.iloc[0]['market_sku']}")
            continue

        # –ò—â–µ–º –±–µ–∑ —Ü–≤–µ—Ç–∞ (—á—É—Ç—å –º–µ–Ω–µ–µ —Å—Ç—Ä–æ–≥–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
        match = sku_df[
            (sku_df['n_model'] == n_model) &
            (sku_df['n_memory'] == n_memory) &
            (sku_df['n_sim'] == n_sim)
            ]
        if not match.empty:
            summary.at[idx, 'SKU'] = str(match.iloc[0]['market_sku'])
            print(
                f"[MATCH*] {row['model']} ‚Üí {n_model}|{n_memory}|*|{n_sim} ‚Üí {match.iloc[0]['model']}|{match.iloc[0]['memory']}|*|{match.iloc[0]['sim_type']} ‚Üí SKU={match.iloc[0]['market_sku']}")
            continue

        print(f"[NO MATCH] {row['model']} ‚Üí {n_model}|{n_memory}|{n_color}|{n_sim}")
        summary.at[idx, 'SKU'] = '‚Äî'

    df['datetime'] = pd.to_datetime(df['datetime'], errors='coerce')
    last_dates = df.groupby(['model', 'memory', 'color', 'country'])['datetime'].max().reset_index()
    last_dates['date_str'] = last_dates['datetime'].dt.strftime('%d.%m')

    summary['–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏'] = summary.apply(
        lambda row: next(
            (d['date_str'] for _, d in last_dates.iterrows()
             if d['model'] == row['raw_model']
             and d['memory'] == row['raw_memory']
             and d['color'] == row['raw_color']
             and d['country'] == row['raw_country']),
            '‚Äî'
        ),
        axis=1
    )
    summary.sort_values(by='model', key=lambda col: col.str.lower(), inplace=True)
    output = [['–ú–æ–¥–µ–ª—å', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞', '–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏', '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å']]
    today = datetime.now().strftime('%d.%m')
    for _, row in summary.iterrows():
        –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å = '–î–∞' if row['–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏'] == today else '–ù–µ—Ç'
        output.append([row['model'], row['price'], row['supplier'], row['–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏'], –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å])

    try:
        gsheet.open_by_key(GOOGLE_SHEET_ID).worksheet("List").clear()
    except:
        gsheet.open_by_key(GOOGLE_SHEET_ID).add_worksheet(title="List", rows="1000", cols="20")

    list_sheet = gsheet.open_by_key(GOOGLE_SHEET_ID).worksheet("List")
    existing = list_sheet.get_all_values()
    if not existing:
        list_sheet.update([output[0]])  # —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        existing_rows = {}
    else:
        header = existing[0]
        id_index = header.index("ID") if "ID" in header else -1
        existing_rows = {
            row[id_index]: row for row in existing[1:] if len(row) > id_index
        }

    # –°–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID
    new_output = [output[0] + ["ID", "SKU"]]
    for _, row in summary.iterrows():
        model_id = generate_model_id(
            row['raw_model'],
            row['raw_memory'],
            row['raw_color'],
            row['raw_country']
        )
        –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å = '–î–∞' if row['–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏'] == today else '–ù–µ—Ç'
        new_output.append([
            row['model'],
            row['price'],
            row['supplier'],
            row['–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏'],
            –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å,
            model_id,
            row.get('SKU', '')
        ])

    list_sheet.clear()
    list_sheet.update(new_output)
    print("[Google Sheets] –õ–∏—Å—Ç List –æ–±–Ω–æ–≤–ª—ë–Ω —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏.")
    highlight_relevant_cells(list_sheet)

def handle_message(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    # –î–æ–±–∞–≤–∏–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–∫—Å—Ç–∞ –∏–∑ caption
    text = update.message.text or update.message.caption

    print(f"[input] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}: {text}")

    if text:
        user_messages.setdefault(uid, []).append(text)
        update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
    else:
        update.message.reply_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞.")


def start(update: Update, context: CallbackContext):
    keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å"), KeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å")],
         [KeyboardButton("–¢–∞–±–ª–∏—Ü–∞")]],
        resize_keyboard=True
    )
    update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

def button_callback(update: Update, context: CallbackContext):
    update.callback_query.answer()
    update.callback_query.message.reply_text("–í–≤–µ–¥–∏ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
    return ASK_SUPPLIER

def receive_supplier(update: Update, context: CallbackContext):
    supplier = update.message.text
    uid = update.effective_user.id
    messages = user_messages.get(uid, [])
    messages = [m.strip() for m in messages if m.strip()]  # —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
    messages = list(set(messages))  # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

    print(f"[DEBUG] –û—á–∏—à–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {messages}")


    if not messages:
        update.message.reply_text("–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return ConversationHandler.END

    print(f"[AI] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ '{supplier}'...")
    update.message.reply_text(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π...")
    products = normalize_with_ai(messages, supplier)
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç AI: {len(products)}")
    print(f"[DEBUG] –ü—Ä–æ–¥—É–∫—Ç—ã: {products}")

    unknown = [p['model'] for p in products if not get_device_group(p['model'])]

    for model in set(unknown):
        custom_groups[model] = model
        update.message.reply_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ *{model}* —Å–æ–∑–¥–∞–Ω–∞.", parse_mode='Markdown')

    if unknown:
        save_custom_groups(custom_groups)

    update_google_sheets(products)
    update.message.reply_text(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
    user_messages[uid] = []
    return ConversationHandler.END

def ask_next_group(update: Update, context: CallbackContext, uid=None):
    if uid is None:
        uid = update.effective_user.id

    pending = pending_products.get(uid)
    if not pending or not pending['pending_models']:
        context.bot.send_message(chat_id=uid, text="‚úÖ –í—Å–µ –Ω–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
        update_google_sheets(pending['products'])
        user_messages[uid] = []
        pending_products.pop(uid, None)
        return

    model = pending['pending_models'].pop(0)
    print(f"[–ì—Ä—É–ø–ø—ã] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å: {model} ‚Äî —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    keyboard = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data=f"create_group:{hash(model)}")],
        [InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_group:{hash(model)}")]
    ]
    markup = InlineKeyboardMarkup(keyboard)
    context.bot.send_message(chat_id=uid, text=f"–ú–æ–¥–µ–ª—å *{model}* –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É?",
                             parse_mode='Markdown', reply_markup=markup)

def handle_group_decision(update: Update, context: CallbackContext):
    query = update.callback_query
    uid = query.from_user.id
    data = query.data
    query.answer()

    if data.startswith("create_group:"):
        model = data.split(":", 1)[1]
        for m in pending_products[uid]['pending_models']:
            if hash(m) == int(model):
                custom_groups[m] = m
        save_custom_groups(custom_groups)
        print(f"[–ì—Ä—É–ø–ø—ã] –ì—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞: {model}")
        query.edit_message_text(f"‚úÖ –ì—Ä—É–ø–ø–∞ *{model}* —Å–æ–∑–¥–∞–Ω–∞.", parse_mode='Markdown')

    elif data.startswith("skip_group:"):
        model = data.split(":", 1)[1]
        print(f"[–ì—Ä—É–ø–ø—ã] –ú–æ–¥–µ–ª—å –ø—Ä–æ–ø—É—â–µ–Ω–∞: {model}")
        query.edit_message_text(f"‚è≠ –ú–æ–¥–µ–ª—å *{model}* –ø—Ä–æ–ø—É—â–µ–Ω–∞.", parse_mode='Markdown')
        pending_products[uid]['products'] = [p for p in pending_products[uid]['products'] if hash(p['model']) != int(model)]

    ask_next_group(update, context, uid)

def highlight_relevant_cells(sheet):
    try:
        from gspread_formatting import CellFormat, Color, format_cell_range
        from itertools import groupby

        values = sheet.get_all_values()
        if not values:
            return

        header = values[0]
        data = values[1:]
        if '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å' not in header:
            return

        relevance_index = header.index('–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å')
        col_letter = chr(65 + relevance_index)

        green = CellFormat(backgroundColor=Color(0.8, 1, 0.8))
        green_cells = [f"{col_letter}{idx}" for idx, row in enumerate(data, start=2)
                       if len(row) > relevance_index and row[relevance_index].strip().lower() == '–¥–∞']

        def compress_ranges(cells):
            ranges = []
            for k, g in groupby(enumerate(cells), lambda ix: ix[0] - int(ix[1][len(col_letter):])):
                group = list(g)
                if len(group) == 1:
                    ranges.append(group[0][1])
                else:
                    start = group[0][1]
                    end = group[-1][1]
                    ranges.append(f"{start}:{end}")
            return ranges

        for rng in compress_ranges(green_cells):
            format_cell_range(sheet, rng, green)

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∞—Å–∫–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫: {e}")

def reset_relevance_column():
    try:
        sheet = gsheet.open_by_key(GOOGLE_SHEET_ID).worksheet("List")
        values = sheet.get_all_values()
        if not values:
            return

        header = values[0]
        data = values[1:]

        if '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å' not in header:
            header.append('–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å')
            for row in data:
                row.append('–ù–µ—Ç')
        else:
            relevance_index = header.index('–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å')
            for row in data:
                if len(row) <= relevance_index:
                    row += ['–ù–µ—Ç']
                else:
                    row[relevance_index] = '–ù–µ—Ç'

        sheet.update([header] + data)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
        from gspread_formatting import CellFormat, Color, format_cell_range
        from gspread_formatting import set_frozen

        green = CellFormat(backgroundColor=Color(0.8, 1, 0.8))
        red = CellFormat(backgroundColor=Color(1, 0.8, 0.8))

        relevance_index = header.index('–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å')
        green = CellFormat(backgroundColor=Color(0.8, 1, 0.8))
        red = CellFormat(backgroundColor=Color(1, 0.8, 0.8))

        relevance_index = header.index('–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å')
        cell_range = f"{chr(65 + relevance_index)}2:{chr(65 + relevance_index)}{len(data)+1}"

        color_values = []
        for row in data:
            if len(row) > relevance_index and row[relevance_index].strip().lower() == '–¥–∞':
                color_values.append(green)
            else:
                color_values.append(red)

        from gspread_formatting import format_cell_range

        green = CellFormat(backgroundColor=Color(0.8, 1, 0.8))
        red = CellFormat(backgroundColor=Color(1, 0.8, 0.8))

        col_letter = chr(65 + relevance_index)
        total_rows = len(data)

        green_range = []
        red_range = []

        for idx, row in enumerate(data, start=2):
            val = row[relevance_index].strip().lower() if len(row) > relevance_index else '–Ω–µ—Ç'
            if val == '–¥–∞':
                green_range.append(f"{col_letter}{idx}")
            else:
                red_range.append(f"{col_letter}{idx}")

        from itertools import groupby

        def compress_ranges(cells):
            ranges = []
            for k, g in groupby(enumerate(cells), lambda ix: ix[0] - int(ix[1][len(col_letter):])):
                group = list(g)
                if len(group) == 1:
                    ranges.append(group[0][1])
                else:
                    start = group[0][1]
                    end = group[-1][1]
                    ranges.append(f"{start}:{end}")
            return ranges

        for rng in compress_ranges(green_range):
            format_cell_range(sheet, rng, green)
        for rng in compress_ranges(red_range):
            format_cell_range(sheet, rng, red)

        print("[List] –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–±—Ä–æ—à–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞.")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")

import threading
import schedule

def zero_command(update: Update, context: CallbackContext):
    reset_relevance_column()
    update.message.reply_text("‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω–∞.")

def scheduler_loop():
    schedule.every().day.at("00:00").do(reset_relevance_column)
    while True:
        schedule.run_pending()
        time.sleep(60)

threading.Thread(target=scheduler_loop, daemon=True).start()

def drop_table(update: Update, context: CallbackContext):
    try:
        raw_sheet = gsheet.open_by_key(GOOGLE_SHEET_ID).worksheet("Raw")
        list_sheet = gsheet.open_by_key(GOOGLE_SHEET_ID).worksheet("List")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        raw_values = raw_sheet.get_all_values()
        if raw_values:
            raw_sheet.batch_clear([f"A2:Z{len(raw_values)}"])
        list_values = list_sheet.get_all_values()
        if list_values:
            list_sheet.batch_clear([f"A2:Z{len(list_values)}"])

        update.message.reply_text("üóë –¢–∞–±–ª–∏—Ü—ã *Raw* –∏ *List* –æ—á–∏—â–µ–Ω—ã (–∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã).", parse_mode='Markdown')
        print("[Command] –¢–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã –ø–æ –∫–æ–º–∞–Ω–¥–µ /droptable")
    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–∞–±–ª–∏—Ü: {e}")
        update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã.")

def clear_messages(update: Update, context: CallbackContext):
    uid = update.effective_user.id
    user_messages[uid] = []
    update.message.reply_text("üßπ –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—á–∏—â–µ–Ω.")

def start_form(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏ –∏–º—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
    return ASK_SUPPLIER

def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("form", start_form))
    dp.add_handler(CommandHandler("zero", zero_command))
    dp.add_handler(CommandHandler("droptable", drop_table))

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(button_callback, pattern="start_form"),
            MessageHandler(Filters.regex("^(–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å)$"), start_form),  # <== –≠–¢–û –î–û–ë–ê–í–¨
        ],
        states={
            ASK_SUPPLIER: [MessageHandler(Filters.all & ~Filters.command, receive_supplier)]
        },
        fallbacks=[]
    )

    dp.add_handler(conv_handler)
    dp.add_handler(MessageHandler(Filters.caption & ~Filters.command, handle_keyboard_input))
    dp.add_handler(CallbackQueryHandler(handle_group_decision, pattern="^(create_group|skip_group):"))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_keyboard_input))

    print("[Bot] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
